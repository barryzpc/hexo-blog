<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浩天说</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-10-09T03:26:53.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>鹏程</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>系统更新导致：PHP报错 &#39;libonig.so.2: cannot open shared object file... &#39;问题解决</title>
    <link href="http://example.com/articles/2020/08/27/1598522167215.html"/>
    <id>http://example.com/articles/2020/08/27/1598522167215.html</id>
    <published>2020-08-27T09:56:07.000Z</published>
    <updated>2020-10-09T03:26:53.000Z</updated>
    
    
    <summary type="html">问题描述
今天没事查看了一下自己服务器运行的php定时推送任务的日志，发现今天的运行报错了。而之前的运行都成功了。

报错信息：

1


/usr/local/php/bin/php: error while loading shared libraries: libonig.so.2: cannot open shared object file: No such file or directory


我回想了一下肯定是昨天执行了yum -y update 这个命令更新了系统，导致一些旧的库被删除了。

问题分析
错误提示libonig.so.2找不到了。去到/usr/lib64目录下发</summary>
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>使用PHP下载网络图片或文件</title>
    <link href="http://example.com/articles/2020/08/12/1597218334271.html"/>
    <id>http://example.com/articles/2020/08/12/1597218334271.html</id>
    <published>2020-08-12T07:45:34.000Z</published>
    <updated>2020-08-12T08:04:49.000Z</updated>
    
    
    <summary type="html">变量说明
1
2
3
4
5


//图片要保存的绝对路径
$path = &#39;/test/test.jpg&#39;;

//要下载的网络图片链接
$img_url = &#39;http://az29176.vo.msecnd.net/videocontent/GrizzlyPeakSF_FF_768_HD_ZH-CN1078880766.jpg&#39;； 


file_get_contents下载网络图片
1


file_put_contents($path, file_get_contents($img_url));


 * ps：当用file_get_contents()函数去下载带有https协议的</summary>
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="CURL" scheme="http://example.com/tags/CURL/"/>
    
  </entry>
  
  <entry>
    <title>Apache(wamp)下配置ssl证书</title>
    <link href="http://example.com/articles/2020/08/04/1596512458890.html"/>
    <id>http://example.com/articles/2020/08/04/1596512458890.html</id>
    <published>2020-08-04T03:40:58.000Z</published>
    <updated>2020-08-04T03:44:35.000Z</updated>
    
    
    <summary type="html">环境
WAMP + SSL

Window + Apache + MySQL + PHP 

配置步骤
 1. 在apache安装目录下打开httpd.conf文件，找到，并打开注释：1
    2
    3
    4
    
    
    LoadModule socache_shmcb_module modules/mod_socache_shmcb.so 
    LoadModule ssl_module modules/mod_ssl.so 
    Include conf/extra/httpd-ssl.conf 
    Include conf/extra/http</summary>
    
    
    
    
    <category term="wamp" scheme="http://example.com/tags/wamp/"/>
    
    <category term="ssl" scheme="http://example.com/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>Apache报错 Parent: child process 2744 exited with status 3221226356 -- Restarting</title>
    <link href="http://example.com/articles/2020/08/04/1596509366225.html"/>
    <id>http://example.com/articles/2020/08/04/1596509366225.html</id>
    <published>2020-08-04T02:49:26.000Z</published>
    <updated>2020-08-04T02:49:26.000Z</updated>
    
    
    <summary type="html">问题描述
Windows系统+apache+mysql+php环境下，访问量大的时候在apache_error.log 中出现报错：

1


Parent: child process 2744 exited with status 3221226356 -- Restarting.


问题分析
这是由于apache的默认堆栈值较小，所以Windows中经常会出现此问题。 当使用分配了大量堆栈的php代码时，就会发生这种情况。

所以要修改堆栈大小（ThreadStackSize）。 建议将其设置为16 Mb（16777216）

解决方案
ThreadStackSize的设置是在http</summary>
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="wamp" scheme="http://example.com/tags/wamp/"/>
    
  </entry>
  
  <entry>
    <title>PHP下使用rabbitMQ报错Call to undefined function PhpAmqpLib\\Wire\\IO\\socket_strerror()的问题查找与解决</title>
    <link href="http://example.com/articles/2020/08/03/1596442518677.html"/>
    <id>http://example.com/articles/2020/08/03/1596442518677.html</id>
    <published>2020-08-03T08:15:18.000Z</published>
    <updated>2020-08-03T08:16:59.000Z</updated>
    
    
    <summary type="html">场景描述
今天在一个新的环境下，部署一个项目，其中有用到rabbitMQ。但在执行过程中发现报错。错误信息：

1
2
3
4
5
6
7
8


{
    &quot;code&quot;: 3000,
    &quot;message&quot;: &quot;Call to undefined function PhpAmqpLib\\Wire\\IO\\socket_strerror()&quot;,
    &quot;data&quot;: {
        &quot;file&quot;: &quot;D:\\project\\***\\vendor\\php-amqplib\\php-amqplib\\PhpAmqpLib\\Wire\\IO\\StreamIO.php&quot;,
 </summary>
    
    
    
    
    <category term="RabbitMQ" scheme="http://example.com/tags/RabbitMQ/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>python项目依赖库的批量导出和导入</title>
    <link href="http://example.com/articles/2020/07/24/1595584844339.html"/>
    <id>http://example.com/articles/2020/07/24/1595584844339.html</id>
    <published>2020-07-24T10:00:44.000Z</published>
    <updated>2020-07-24T10:02:19.000Z</updated>
    
    
    <summary type="html">场景描述
python项目一般都会用到很多依赖环境，当我们迁移项目的时候，运行环境和运行代码都很好迁移。但是大量第三方的依赖库（自带的库就不用担心了）也需要很轻松的批量迁移。

解决方案
批量导出
执行下面命令将依赖库到python_lib.txt文件中

1


pip freeze &gt; python_lib.txt


python_lib.txt 中内容大致是这样：

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17


mock==4.0.2
numpy==1.16.2
opencv-python==4.1.1.26
Pillow==7.1.2
pro</summary>
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>windows生产服务器下部署Flask</title>
    <link href="http://example.com/articles/2020/07/24/1595577454676.html"/>
    <id>http://example.com/articles/2020/07/24/1595577454676.html</id>
    <published>2020-07-24T07:57:34.000Z</published>
    <updated>2020-07-24T08:19:17.000Z</updated>
    
    
    <summary type="html">场景描述
很多python工程师，都会用flask 来开发、部署Web 应用。但也有很多工程师就直接使用 app.run()在生产环境上启动服务。

那可能会发现 Flask 用 app.run()这种方式启动，有异常特别容易退出，而且性能很弱。

生产环境下，python常见的web部署搭配是 nginx+gunicorn。

但是这种搭配只适合在Linux环境下。关于这种搭配的配置方法网上有很多。反而在windows环境下该使用什么搭配来部署，网上说的比不多。而我们的项目由于某种特殊的原因就必须搭建在windows环境下，所以使用的部署方案是：Flask + Tornado+nginx。
</summary>
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>PHP使用curl实现毫秒级等待的伪异步请求</title>
    <link href="http://example.com/articles/2020/07/16/1594914341041.html"/>
    <id>http://example.com/articles/2020/07/16/1594914341041.html</id>
    <published>2020-07-16T15:45:41.000Z</published>
    <updated>2020-07-27T01:23:20.000Z</updated>
    
    
    <summary type="html">场景描述
在开发中会遇到这样的场景：需要做一个处理，而这个处理需要花费一定的时间，并且这个处理的结果并不是需要及时的得到结果。那么我们就可能会想到使用异步处理，来大大缩短整个流程所需要的时间。而PHP没有很好的异步支持，那么就会想到使用CURL来请求并主动断开链接，不去等待请求结果的返回来实现伪异步。

场景升级
这样处理也会出现一个问题，那么我们就不得不接受要花费一定的时间在请求上。这个时间是无法省去的，那么就只能是这个时间越短越好（其实不是越短越好，因为如果时间太短链接还没有请求到就主动断开了）。而之前版本中 CUROPT_TIMEOUT最小设置为1。也就是说，客户端至少必须等待1秒钟。这</summary>
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="CURL" scheme="http://example.com/tags/CURL/"/>
    
    <category term="毫秒级伪异步" scheme="http://example.com/tags/%E6%AF%AB%E7%A7%92%E7%BA%A7%E4%BC%AA%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>我在 GitHub 上的开源项目</title>
    <link href="http://example.com/my-github-repos"/>
    <id>http://example.com/my-github-repos</id>
    <published>2020-05-13T03:06:50.000Z</published>
    <updated>2020-05-13T03:06:50.000Z</updated>
    
    
    <summary type="html">1. pic-repo 🤩1⭐️1🖖0🏠http://myblog.zhengpc.com/articles/2020/03/11/1583919217986.html
个人图床，用来存放个人项目的静态文件库，便于直链访问




2. nav.github.io HTML 🤩2⭐️1🖖1🏠https://nav.zhengpc.com/
常用网站地址导航page




3. solo-blog 🤩1⭐️0🖖0🏠https://myblog.zhengpc.com
✍️ 浩天说 - 路漫漫其修远兮，吾将上下而求索




4. my-solo4.3.1 FreeMarker</summary>
    
    
    
    
    <category term="开源" scheme="http://example.com/tags/%E5%BC%80%E6%BA%90/"/>
    
    <category term="GitHub" scheme="http://example.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>网上收集的PHP知识点和面试汇总</title>
    <link href="http://example.com/articles/2020/04/22/1587541701093.html"/>
    <id>http://example.com/articles/2020/04/22/1587541701093.html</id>
    <published>2020-04-22T07:48:21.000Z</published>
    <updated>2020-10-10T06:15:51.000Z</updated>
    
    
    <summary type="html">简书
 1. PHP面试题总结
 2. PHP面试题汇总
 3. MySQL存储引擎－－MyISAM与InnoDB区别
 4. 关于HTTP协议，一篇就够了

掘金
 1. PHP面试总结

博客园
 1. PHP的几种排序算法的比较
 2. Redis实战
 3. Mysql的select加锁分析

酷 壳
 1. MYSQL性能优化的最佳20+条经验

GitHub
 1. PHP面试问答

LearnKu
 1. PHP 内核与原生扩展开发(译)
 2.  PHP 设计模式全集(译)
 3. PHP PSR 标准规范(译)

知乎
 1. PHP面试题汇总</summary>
    
    
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP实现输入一个整数n，输出一个n×n蛇形矩阵</title>
    <link href="http://example.com/articles/2020/04/20/1587390691737.html"/>
    <id>http://example.com/articles/2020/04/20/1587390691737.html</id>
    <published>2020-04-20T13:51:31.000Z</published>
    <updated>2020-05-11T01:28:46.000Z</updated>
    
    
    <summary type="html">前段时间群里发了一个有意思题，自己试着简单粗暴的实现一下。
题目：
实现输入一个整数n，输出一个n×n蛇形阵。例如：
1
2
3
4
5


//输入 3,输出：
 1   2   3
 8   9   4
 7   6   5
 


1
2
3
4
5


//输入 4，输出：
 1    2   3   4
 12   13  14  5
 11   16  15  6
 10   9   8   7


思路：
1、观察可以发现，矩阵的值的规律是由外向内画圈依次递增的卷入（排列），这是这个题的突破口。可以按照这个依次递增的值的位置来依次赋值
2、而且转的圈数为 n 除以2(也就是行数，</summary>
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>转载： 你知道缓存的正确打开方式么？</title>
    <link href="http://example.com/articles/2020/04/16/1587017727206.html"/>
    <id>http://example.com/articles/2020/04/16/1587017727206.html</id>
    <published>2020-04-16T06:15:27.000Z</published>
    <updated>2020-04-16T06:15:27.000Z</updated>
    
    
    <summary type="html">说明：本文为转载内容

你知道缓存的正确打开方式么？
第一篇
原文地址：https://mp.weixin.qq.com/s/evyse2RD_v25MI52umPReg

第二篇
原文地址：https://mp.weixin.qq.com/s/JQbOqv55zXA0TTHPohb9jA

本文由 桶哥 授权 饭米粒 发布，转载请注明本来源信息</summary>
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="转载" scheme="http://example.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
    <category term="缓存" scheme="http://example.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>转载：centos7 编译安装 php7.4</title>
    <link href="http://example.com/articles/2020/04/14/1586834851714.html"/>
    <id>http://example.com/articles/2020/04/14/1586834851714.html</id>
    <published>2020-04-14T03:27:31.000Z</published>
    <updated>2020-04-14T03:29:47.000Z</updated>
    
    
    <summary type="html">原文地址：https://www.cnblogs.com/liubaoqing/p/12176017.html

1. 下载安装编译工具
1


yum groupinstall &#39;Development Tools&#39;


2.安装依赖包
1


yum install libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel </summary>
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="转载" scheme="http://example.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
    <category term="CentOS7" scheme="http://example.com/tags/CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>PHP的常用工具函数</title>
    <link href="http://example.com/articles/2020/03/17/1584424890414.html"/>
    <id>http://example.com/articles/2020/03/17/1584424890414.html</id>
    <published>2020-03-17T06:01:30.000Z</published>
    <updated>2020-07-03T02:22:06.000Z</updated>
    
    
    <summary type="html">记录平时开发中经常使用的小工具
跳转链接
1
2
3
4
5
6


/**
 * @param string $url 请求地址
 */
static public function location($url){
   echo &quot;&lt;script language=&#39;javascript&#39;&gt;window.location.href=&#39;{$url}&#39;;&lt;/script&gt;&quot;;
}


请求链接获取数据
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
3</summary>
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ的安装以及对应的PHP扩展的安装</title>
    <link href="http://example.com/articles/2020/03/17/1584413384830.html"/>
    <id>http://example.com/articles/2020/03/17/1584413384830.html</id>
    <published>2020-03-17T02:49:44.000Z</published>
    <updated>2020-03-17T02:58:50.000Z</updated>
    
    
    <summary type="html">记于2019-2-27

环境：windows 平台，PHP7.1.9
1、安装 Erlang
 * 因为 RabbitMQ 是用 Erlang 语言编写，安装之前需要先安装 Erlang， 下载地址http://www.erlang.org/downloads



 * 我选择的是图中的版本，一直next即可
   
   2、下载安装RabbitMQ
   
 * 下载地址http://www.rabbitmq.com/download.html
   
   
 * 也是一直next
   
   
 * 安装完成后并没有启动RabbitMQ，需要执行下面的操作：
   
   


</summary>
    
    
    
    
    <category term="RabbitMQ" scheme="http://example.com/tags/RabbitMQ/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>如何使用github当作自己的静态文件库</title>
    <link href="http://example.com/articles/2020/03/11/1583919217986.html"/>
    <id>http://example.com/articles/2020/03/11/1583919217986.html</id>
    <published>2020-03-11T09:33:38.000Z</published>
    <updated>2020-04-22T14:11:21.000Z</updated>
    
    
    <summary type="html">场景描述
很多时候自己的博客或者是网站项目都会涉及到一些静态文件的访问，如图片、js 文件，CSS 文件。如果全放在自己的服务器上，将会产生不必要的费用，并且访问的速度也不能得到保证。这个时候就需要一个方式能够提供免费高效稳定的方式来存放及访问我们的静态文件。

一、在 GitHub 上创建一个图床仓库


 * PS：一定要选 Public 不然无法访问到资源

二、将项目克隆到本地
1


git clone git@github.com:barryzpc/pic-repo.git


三、创建自己的项目
在 pic-repo 项目中创建自己的项目，比如我有个博客的项目那么我就建立一个 m</summary>
    
    
    
    
    <category term="github" scheme="http://example.com/tags/github/"/>
    
    <category term="JSDelivr" scheme="http://example.com/tags/JSDelivr/"/>
    
  </entry>
  
  <entry>
    <title>Yii 根据公司id来产品分表，以及读取产品表时的一些操作</title>
    <link href="http://example.com/articles/2020/03/03/1583207015907.html"/>
    <id>http://example.com/articles/2020/03/03/1583207015907.html</id>
    <published>2020-03-03T03:43:36.000Z</published>
    <updated>2020-03-03T05:47:29.000Z</updated>
    
    
    <summary type="html">场景描述
由于业务需求要存储很多家的公司以及公司的产品详情，那我就想着根据公司的 id 来建立一一对应的产品详情表。这样便于管理，也分摊了只有一张产品表的查询压力，也会优化查询的速度。
当然如果一个公司的产品足够多，那么也要对于该公司对应的产品表进行分表。这时分表的核心思想可以采取对产品 id 取余的方式存储、读取。这个方式在这篇笔记里就不详细说明了。
开发环境
 PHP Yii MySql 

如何创建产品表
在添加一个公司的信息时自动创建公司对应的产品表
1
2
3
4
5
6
7
8
9


//新增一个公司信息，返回公司id
$companyId= $this-&gt;CompanyMode</summary>
    
    
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="Yii" scheme="http://example.com/tags/Yii/"/>
    
  </entry>
  
  <entry>
    <title>PHP遍历删除文件夹以及文件夹里的文件</title>
    <link href="http://example.com/articles/2019/12/30/1577691418354.html"/>
    <id>http://example.com/articles/2019/12/30/1577691418354.html</id>
    <published>2019-12-30T07:36:58.000Z</published>
    <updated>2019-12-30T08:33:00.000Z</updated>
    
    
    <summary type="html">场景描述：
遍历去清空一个目录下的文件夹以及文件
代码示例：
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25


//删除一个文件夹下面的所有的文件以及文件夹
    static public function delDir($path){
        error_reporting(0);
        //如果是目录则继续
        if(is_dir($path)){
            //扫描一个文件夹内的所有文件夹和文件并返回数组
            $p = scandir(</summary>
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>如何隐藏HTTP响应头里的server和X-Powered-By</title>
    <link href="http://example.com/articles/2019/11/21/1574332517065.html"/>
    <id>http://example.com/articles/2019/11/21/1574332517065.html</id>
    <published>2019-11-21T10:35:17.000Z</published>
    <updated>2019-12-30T07:46:46.000Z</updated>
    
    
    <summary type="html">场景描述
很多时候我们为了安全考虑，需要隐藏我们环境的一些版本号，如：server、X-Powered-By

未隐藏时http响应头中包含了如下信息


apache 隐藏 server
修改httpd.conf 设置 

ServerSignature Off
ServerTokens Prod

nginx 隐藏 server
修改nginx.conf 在http里面设置 

server_tokens off;

隐藏X-Powered-By
修改 php.ini 文件 设置 

expose_php = Off

隐藏之后显示</summary>
    
    
    
    
    <category term="PHP" scheme="http://example.com/tags/PHP/"/>
    
    <category term="运维" scheme="http://example.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Tmux: linux下的分屏神器</title>
    <link href="http://example.com/articles/2019/11/08/1573185041865.html"/>
    <id>http://example.com/articles/2019/11/08/1573185041865.html</id>
    <published>2019-11-08T03:50:41.000Z</published>
    <updated>2019-12-29T14:51:23.000Z</updated>
    
    
    <summary type="html">tmux
tmux（terminal multiplexer）是Linux上的终端窗口的分屏神器。在一个终端窗口中可以分多个屏同时使用。
安装
Tmux 的安装。
# Ubuntu
$ sudo apt-get install tmux

# CentOS
$ sudo yum install tmux

# Mac
$ brew install tmux

启动与退出
安装完成后，键入tmux命令，就进入了 Tmux 窗口。
$ tmux

按下Ctrl+d或者显式输入exit命令，就可以退出 Tmux 窗口。
$ exit

tmux的基础操作
基本的操作无非就是对会话、窗口、窗格进行管理</summary>
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="tmux" scheme="http://example.com/tags/tmux/"/>
    
  </entry>
  
</feed>
